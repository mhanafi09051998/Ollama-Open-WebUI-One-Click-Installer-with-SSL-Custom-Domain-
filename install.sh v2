#!/usr/bin/env bash
set -euo pipefail

check_installed() {
    command -v "$1" &>/dev/null
}

# Firewall UFW: allow only SSH, HTTP, HTTPS
if check_installed ufw; then
    echo "[✓] UFW sudah terpasang."
else
    echo "[*] Installing UFW (firewall)..."
    sudo apt-get update
    sudo apt-get install -y ufw
fi
sudo ufw allow 22
sudo ufw allow 80
sudo ufw allow 443
sudo ufw --force enable

# Install Docker jika belum ada
if ! check_installed docker; then
    echo "[*] Installing Docker..."
    sudo apt-get remove -y docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc || true
    sudo apt-get update
    sudo apt-get install -y ca-certificates curl gnupg lsb-release
    sudo mkdir -p /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
    sudo chmod a+r /etc/apt/keyrings/docker.asc
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    sudo usermod -aG docker "$USER"
else
    echo "[✓] Docker sudah terpasang."
fi

# Install Ollama jika belum ada
if ! check_installed ollama; then
    echo "[*] Installing Ollama..."
    curl -fsSL https://ollama.com/download/ollama-linux-amd64.tgz -o ollama-linux-amd64.tgz
    sudo tar -C /usr -xzf ollama-linux-amd64.tgz
    rm ollama-linux-amd64.tgz
else
    echo "[✓] Ollama sudah terpasang."
fi

# Install Nginx jika belum ada
if ! check_installed nginx; then
    echo "[*] Installing Nginx..."
    sudo apt-get update
    sudo apt-get install -y nginx
else
    echo "[✓] Nginx sudah terpasang."
fi

# Install certbot jika belum ada
if ! check_installed certbot; then
    echo "[*] Installing Certbot..."
    sudo apt-get update
    sudo apt-get install -y certbot python3-certbot-nginx
else
    echo "[✓] Certbot sudah terpasang."
fi

# Tambah user system & systemd untuk Ollama
if ! id -u ollama > /dev/null 2>&1; then
    sudo useradd -r -s /bin/false -m -d /usr/share/ollama ollama
fi

OLLAMA_SERVICE="/etc/systemd/system/ollama.service"
if [ ! -f "$OLLAMA_SERVICE" ]; then
sudo tee "$OLLAMA_SERVICE" > /dev/null << 'EOF'
[Unit]
Description=Ollama Service
After=network-online.target

[Service]
ExecStart=/usr/bin/ollama serve
User=ollama
Group=ollama
Restart=always
RestartSec=3
Environment="OLLAMA_HOST=0.0.0.0"

[Install]
WantedBy=multi-user.target
EOF
    sudo systemctl daemon-reload
    sudo systemctl enable ollama
    sudo systemctl start ollama
else
    echo "[✓] Service Ollama sudah dikonfigurasi."
fi

# Input domain & validasi
while true; do
    read -rp "Masukkan domain untuk akses WebUI (misal: chat.mydomain.com): " DOMAIN
    if [[ -z "$DOMAIN" ]]; then
        echo "Domain tidak boleh kosong!"
        continue
    fi
    SERVER_IP=$(curl -s https://ipv4.icanhazip.com | tr -d '\n')
    DOMAIN_IP=$(getent ahostsv4 "$DOMAIN" | awk '{print $1; exit}')
    if [[ "$DOMAIN_IP" == "$SERVER_IP" ]]; then
        echo "[✓] Domain valid dan mengarah ke IP server ini: $SERVER_IP"
        break
    else
        echo "[!] Domain $DOMAIN mengarah ke $DOMAIN_IP, bukan ke IP server ($SERVER_IP)"
        echo "Silakan arahkan DNS domain ke IP server, lalu ulangi."
        continue
    fi
done

# Konfigurasi Nginx reverse proxy untuk Open WebUI
NGINX_CONF="/etc/nginx/sites-available/openwebui"
if [ ! -f "$NGINX_CONF" ]; then
sudo tee "$NGINX_CONF" > /dev/null << EOF
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        client_max_body_size 100M;
    }
}
EOF
    sudo ln -sf "$NGINX_CONF" /etc/nginx/sites-enabled/openwebui
    sudo nginx -t && sudo systemctl reload nginx
else
    echo "[✓] Konfigurasi Nginx Open WebUI sudah ada."
fi

# Setup SSL Certbot (Let's Encrypt)
if [ ! -d "/etc/letsencrypt/live/$DOMAIN" ]; then
    echo "[*] Mendapatkan sertifikat SSL dari Let's Encrypt untuk $DOMAIN ..."
    sudo certbot --nginx --non-interactive --agree-tos --redirect --hsts --staple-ocsp -m admin@$DOMAIN -d $DOMAIN
else
    echo "[✓] Sertifikat SSL sudah ada untuk $DOMAIN."
fi

# Cek status certbot timer (auto renew SSL)
echo
echo "==== Certbot Renew Status ===="
if systemctl is-active --quiet certbot.timer; then
    echo "[✓] Certbot renewal aktif."
else
    echo "[!] WARNING: certbot.timer tidak aktif. Cek dengan 'sudo systemctl status certbot.timer' dan aktifkan agar SSL auto-renew."
fi

# Auto update Docker image dan jalankan Open WebUI
if docker ps --format '{{.Names}}' | grep -q '^open-webui$'; then
    echo "[*] Menghentikan dan menghapus container lama Open WebUI..."
    docker stop open-webui
    docker rm open-webui
fi
echo "[*] Menarik (pull) Docker image terbaru Open WebUI..."
docker pull ghcr.io/open-webui/open-webui:main
echo "[*] Menjalankan ulang container Open WebUI..."
docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway \
  -v open-webui:/app/backend/data \
  --name open-webui --restart always ghcr.io/open-webui/open-webui:main

echo
echo "=== Instalasi & Konfigurasi Selesai ==="
echo "Akses Open WebUI sekarang di: https://$DOMAIN"
echo
echo "[INFO] Firewall hanya membuka port 22 (SSH), 80 (HTTP), dan 443 (HTTPS)."
echo "[INFO] Docker Open WebUI hanya berjalan di localhost (port 3000, diamankan Nginx + SSL)."
echo "[INFO] Certbot SSL auto-renew sudah dicek."
