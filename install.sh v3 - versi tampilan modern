#!/bin/bash

# Pastikan skrip dijalankan dengan hak akses root
if [ "$(id -u)" -ne 0 ]; then
  echo "Skrip ini harus dijalankan sebagai root atau dengan sudo." >&2
  exit 1
fi

# --- Konfigurasi Tampilan dan Log ---
LOG_FILE="/var/log/ollama_installer.log"
> "$LOG_FILE" # Hapus log lama

# --- Konfigurasi Visual ---
# Warna
BLUE=$(tput setaf 4)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
NC=$(tput sgr0) # No Color

# Ikon
CHECK="✔"
CROSS="✖"
SPINNER_CHARS="/-\|"

# Penghitung Langkah
STEP=0
TOTAL_STEPS=8 # Total langkah utama

# --- Fungsi Bantuan Tampilan ---

# Fungsi untuk menampilkan header utama
print_banner() {
    clear
    echo "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
    echo "║                                                                        ║"
    echo "║     ██████╗ ██╗      ██████╗ ██╗      █████╗ ████████╗ █████╗  Ollama      ║"
    echo "║     ██╔══██╗██║     ██╔═══██╗██║     ██╔══██╗╚══██╔══╝██╔══██╗   Auto       ║"
    echo "║     ██████╔╝██║     ██║   ██║██║     ███████║   ██║   ███████║ Installer    ║"
    echo "║     ██╔═══╝ ██║     ██║   ██║██║     ██╔══██║   ██║   ██╔══██║              ║"
    echo "║     ██║     ███████╗╚██████╔╝███████╗██║  ██║   ██║   ██║  ██║ by Gahar     ║"
    echo "║     ╚═╝     ╚══════╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝             ║"
    echo "║                                                                        ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo "${NC}"
}

# Fungsi untuk menampilkan header setiap langkah
print_step_header() {
    ((STEP++))
    echo ""
    echo "${YELLOW}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo "${YELLOW}║ [${STEP}/${TOTAL_STEPS}] $1${NC}"
    echo "${YELLOW}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
}

# Fungsi untuk menunggu kunci apt dilepaskan
wait_for_apt_lock() {
    local msg="Menunggu kunci manajer paket (apt) dilepaskan"
    echo -n "  ${msg}..."
    
    local spinner_pid
    (
        while true; do
            for (( i=0; i<${#SPINNER_CHARS}; i++ )); do
                echo -ne "\r  ${msg}... [${BLUE}${SPINNER_CHARS:$i:1}${NC}]"
                sleep 0.1
            done
        done
    ) & spinner_pid=$!

    # Tunggu hingga semua file kunci dilepaskan
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
          fuser /var/lib/dpkg/lock >/dev/null 2>&1 || \
          fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
        sleep 1
    done

    kill $spinner_pid
    wait $spinner_pid 2>/dev/null
    echo -e "\r  ${msg}... [${GREEN}${CHECK}${NC}]  "
}


# Fungsi untuk menjalankan perintah dengan spinner
run_step() {
    local cmd=$1
    local msg=$2
    
    echo -n "  ${msg}..."
    
    # Spinner
    local spinner_pid
    (
        while true; do
            for (( i=0; i<${#SPINNER_CHARS}; i++ )); do
                echo -ne "\r  ${msg}... [${BLUE}${SPINNER_CHARS:$i:1}${NC}]"
                sleep 0.1
            done
        done
    ) & spinner_pid=$!

    # Jalankan perintah dan alihkan output ke log
    if eval "$cmd" >> "$LOG_FILE" 2>&1; then
        kill $spinner_pid
        wait $spinner_pid 2>/dev/null
        echo -e "\r  ${msg}... [${GREEN}${CHECK}${NC}]  "
    else
        kill $spinner_pid
        wait $spinner_pid 2>/dev/null
        echo -e "\r  ${msg}... [${RED}${CROSS}${NC}]  "
        echo ""
        echo "${RED}╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║ ERROR: Terjadi kegagalan pada langkah terakhir.                            ║"
        echo "║ Silakan periksa log untuk detail lengkap:                                  ║"
        echo "║ $LOG_FILE                                                                  ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
        exit 1
    fi
}

# --- Mulai Instalasi ---
print_banner

# --- 0. Input dari Pengguna ---
echo ""
echo "${YELLOW}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
echo "${YELLOW}║ Informasi Konfigurasi Awal                                                   ║${NC}"
echo "${YELLOW}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
read -p "  Masukkan nama domain Anda (e.g., my-ollama.com): " DOMAIN_NAME
read -p "  Masukkan alamat email Anda (untuk notifikasi SSL): " EMAIL
if [ -z "$DOMAIN_NAME" ] || [ -z "$EMAIL" ]; then
    echo "${RED}  Domain dan Email tidak boleh kosong. Instalasi dibatalkan.${NC}"
    exit 1
fi

# --- 1. Persiapan & Validasi DNS ---
print_step_header "Persiapan Sistem & Validasi DNS"
wait_for_apt_lock
run_step "apt-get update -y" "Memperbarui daftar paket sistem"
run_step "apt-get install -y curl gnupg ca-certificates dnsutils" "Menginstal dependensi dasar"

echo "  Memvalidasi DNS untuk domain (IPv4)..."
SERVER_IP=$(curl -4 -s https://ifconfig.me/ip || curl -4 -s https://api.ipify.org)
if [ -z "$SERVER_IP" ]; then echo "  ${RED}GAGAL: Tidak dapat menentukan IP publik server.${NC}"; exit 1; fi
DOMAIN_IP=$(dig +short "$DOMAIN_NAME" A | head -n 1)
if [ -z "$DOMAIN_IP" ]; then echo "  ${RED}GAGAL: Tidak dapat menemukan A record untuk '$DOMAIN_NAME'.${NC}"; exit 1; fi

if [ "$SERVER_IP" != "$DOMAIN_IP" ]; then
    echo "  IP Publik Server: ${YELLOW}$SERVER_IP${NC}"
    echo "  IP Domain       : ${YELLOW}$DOMAIN_IP${NC}"
    echo "  [${RED}${CROSS}${NC}] ${RED}IP tidak cocok! Perbarui A record DNS Anda.${NC}"
    exit 1
else
    echo "  IP Publik Server: ${GREEN}$SERVER_IP${NC}"
    echo "  IP Domain       : ${GREEN}$DOMAIN_IP${NC}"
    echo "  [${GREEN}${CHECK}${NC}] Validasi DNS berhasil!"
fi

# --- 2. Instalasi Docker ---
print_step_header "Instalasi Docker"
run_step "install -m 0755 -d /etc/apt/keyrings" "Membuat direktori kunci GPG"
run_step "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg" "Menambahkan kunci GPG Docker"
run_step "chmod a+r /etc/apt/keyrings/docker.gpg" "Menyesuaikan izin kunci GPG"
run_step 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null' "Menambahkan repositori Docker"
run_step "apt-get update -y" "Memperbarui daftar paket"
run_step "apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" "Menginstal Docker Engine"
run_step "docker run hello-world" "Memverifikasi instalasi Docker"

# --- 3. Instalasi Ollama & Model ---
print_step_header "Instalasi Ollama & Model"
run_step "curl -fsSL https://ollama.com/install.sh | sh" "Mengunduh dan menginstal Ollama"
run_step 'mkdir -p /etc/systemd/system/ollama.service.d/ && echo -e "[Service]\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"" > /etc/systemd/system/ollama.service.d/override.conf' "Mengkonfigurasi host Ollama"
run_step "systemctl daemon-reload && systemctl restart ollama" "Merestart layanan Ollama"
run_step "while ! curl -s http://127.0.0.1:11434/ > /dev/null; do sleep 1; done" "Menunggu server Ollama siap"
run_step "ollama pull deepseek-r1:1.5b" "Mengunduh model deepseek-r1:1.5b"
run_step "ollama list | grep -q 'deepseek-r1:1.5b'" "Memverifikasi unduhan model"

# --- 4. Instalasi & Konfigurasi Nginx ---
print_step_header "Instalasi & Konfigurasi Nginx"
run_step "apt-get install -y nginx" "Menginstal Nginx"

# Menulis file konfigurasi Nginx secara langsung untuk menghindari masalah kutipan
echo -n "  Membuat file konfigurasi Nginx..."
cat << EOF > "/etc/nginx/sites-available/$DOMAIN_NAME"
server {
    listen 80;
    server_name $DOMAIN_NAME;

    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
    }
}
EOF

if [ $? -eq 0 ]; then
    echo -e "\r  Membuat file konfigurasi Nginx... [${GREEN}${CHECK}${NC}]  "
else
    echo -e "\r  Membuat file konfigurasi Nginx... [${RED}${CROSS}${NC}]  "
    exit 1
fi

run_step "ln -sf /etc/nginx/sites-available/$DOMAIN_NAME /etc/nginx/sites-enabled/ && rm -f /etc/nginx/sites-enabled/default" "Mengaktifkan site Nginx"
run_step "nginx -t" "Menguji konfigurasi Nginx"
run_step "systemctl restart nginx" "Merestart Nginx"

# --- 5. Konfigurasi Firewall (UFW) ---
print_step_header "Konfigurasi Firewall (UFW)"
run_step "ufw --force enable" "Mengaktifkan firewall"
run_step "ufw allow 'OpenSSH'" "Mengizinkan koneksi SSH"
run_step "ufw allow 'Nginx Full'" "Mengizinkan traffic web (HTTP/S)"
run_step "ufw reload" "Memuat ulang aturan firewall"

# --- 6. Menjalankan Open WebUI ---
print_step_header "Menjalankan Open WebUI"
run_step "docker rm -f open-webui" "Menghapus kontainer lama (jika ada)"
run_step "docker run -d -p 127.0.0.1:8080:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main" "Menjalankan kontainer Open WebUI"
run_step "sleep 5 && docker ps -a | grep -q 'open-webui'" "Memverifikasi kontainer berjalan"

# --- 7. Instalasi SSL dengan Certbot ---
print_step_header "Instalasi Sertifikat SSL (Let's Encrypt)"
run_step "apt-get install -y certbot python3-certbot-nginx" "Menginstal Certbot"
run_step "certbot --nginx -d \"$DOMAIN_NAME\" --non-interactive --agree-tos -m \"$EMAIL\" --redirect" "Memperoleh sertifikat SSL"

# --- 8. Memverifikasi Proses Pembaruan Sertifikat ---
print_step_header "Memverifikasi Proses Pembaruan Sertifikat"
run_step "certbot renew" "Mencoba pembaruan nyata (bukan simulasi)"
run_step "systemctl list-timers | grep -q 'certbot.timer'" "Memverifikasi timer pembaruan aktif"


# --- Selesai ---
echo ""
echo "${GREEN}╔══════════════════════════════════════════════════════════════════════════════╗"
echo "║                                                                              ║"
echo "║                          INSTALASI SELESAI!                                  ║"
echo "║                                                                              ║"
echo "╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
echo ""
echo "  Selamat! Open WebUI Anda sekarang dapat diakses melalui:"
echo "  ${YELLOW}https://$DOMAIN_NAME${NC}"
echo ""
if [ -n "$SUDO_USER" ]; then
    usermod -aG docker "$SUDO_USER" &>/dev/null
    echo "  ${YELLOW}PENTING:${NC} Pengguna '${SUDO_USER}' telah ditambahkan ke grup Docker."
    echo "  Harap logout dan login kembali agar dapat menjalankan 'docker' tanpa sudo."
fi
echo ""
echo "  Sertifikat SSL Anda akan diperbarui secara otomatis. Konfigurasi pembaruan"
echo "  telah berhasil diverifikasi."
echo ""
echo "  Log instalasi lengkap tersimpan di: ${BLUE}$LOG_FILE${NC}"
echo ""
