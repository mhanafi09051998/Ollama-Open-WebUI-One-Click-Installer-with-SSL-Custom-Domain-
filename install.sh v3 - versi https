#!/bin/bash

# =================================================================================
# SKRIP INSTALASI FINAL: OLLAMA, DOCKER, OPEN WEBUI + NGINX & SSL
#
# Fitur Utama:
# - Pemeriksaan DNS Pra-instalasi: Memastikan domain menunjuk ke IP server (IPv4).
# - Manajemen Firewall Otomatis: Membuka port 80/443 pada UFW jika aktif.
# - Idempotent & Tangguh: Aman dijalankan beberapa kali dan memiliki mekanisme coba-lagi.
# - Konfigurasi Penuh: Dari instalasi dasar hingga domain HTTPS yang fungsional.
# - Interaktif & Opsional: Meminta input pengguna dan membuat SSL opsional.
#
# Dirancang untuk: Ubuntu/Debian.
# Prasyarat:
#   1. Dijalankan di server dengan IP publik statis.
#   2. Record DNS (A) untuk domain Anda SUDAH diarahkan ke IP server IPv4.
# =================================================================================

# --- Variabel Konfigurasi ---
WEBUI_PORT=8080
WEBUI_IMAGE_TAG="main"
OLLAMA_PREPULL_MODEL="deepseek-coder:1.3b-instruct" # Model yang lebih baik untuk coding

# --- Fungsi Bantuan dan Warna ---
set -e
set -o pipefail

BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

log_info() { echo -e "\n${BLUE}===== $1 =====${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warn() { echo -e "${YELLOW}⚠️ $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }

# --- 1. Pemeriksaan Awal dan Input Pengguna (Pre-flight Checks) ---
pre_flight_checks() {
    log_info "Menjalankan Pemeriksaan Awal"

    # 1a. Meminta Input
    log_warn "PASTIKAN DNS record (A) untuk domain Anda sudah diarahkan ke IP server IPv4 ini."
    while [[ -z "$USER_DOMAIN" ]]; do
        read -p "Masukkan nama domain Anda (e.g., chat.domain.com): " USER_DOMAIN
    done
    read -p "Apakah Anda ingin mengaktifkan SSL (HTTPS)? [y/n]: " ACTIVATE_SSL
    USER_EMAIL=""
    if [[ "$ACTIVATE_SSL" =~ ^[Yy]$ ]]; then
        while [[ -z "$USER_EMAIL" ]]; do
            read -p "Masukkan email Anda (diperlukan untuk sertifikat SSL): " USER_EMAIL
        done
    fi

    # 1b. Pemeriksaan DNS (Secara Eksplisit Menggunakan IPv4)
    log_info "Memverifikasi DNS untuk $USER_DOMAIN..."
    if ! command -v dnsutils &> /dev/null; then
        apt-get update >/dev/null && apt-get install -y dnsutils >/dev/null
    fi
    
    SERVER_IP=$(curl -4 -s https://api.ipify.org)
    if [[ -z "$SERVER_IP" ]]; then
        log_error "Tidak dapat mengambil alamat IP publik (IPv4) server."
        exit 1
    fi
    
    DOMAIN_IP=$(dig +short "$USER_DOMAIN" A | head -n 1)
    
    if [[ -z "$DOMAIN_IP" ]]; then
        log_error "Tidak dapat menemukan IP (A Record) untuk domain '$USER_DOMAIN'. Mohon periksa kembali DNS record Anda."
        exit 1
    fi

    if [[ "$SERVER_IP" != "$DOMAIN_IP" ]]; then
        log_error "DNS MISMATCH!"
        log_error "Domain '$USER_DOMAIN' ($DOMAIN_IP) tidak mengarah ke IP server IPv4 ini ($SERVER_IP)."
        log_error "Harap perbaiki DNS record Anda dan tunggu propagasi sebelum menjalankan skrip ini."
        exit 1
    fi
    log_success "Verifikasi DNS berhasil. Domain menunjuk ke IP IPv4 yang benar."
}

# --- 2. Konfigurasi Firewall ---
configure_firewall() {
    if command -v ufw &> /dev/null && ufw status | grep -q 'Status: active'; then
        log_info "Firewall UFW aktif terdeteksi. Mengonfigurasi port..."
        ufw allow ssh
        ufw allow 80/tcp  # HTTP
        ufw allow 443/tcp # HTTPS
        ufw reload
        log_success "Firewall dikonfigurasi untuk mengizinkan SSH, HTTP, dan HTTPS."
    fi
}

# ===== EKSEKUSI SKRIP UTAMA =====

# Panggil Pemeriksaan Awal
pre_flight_checks

# Panggil Konfigurasi Firewall
configure_firewall

ORIGINAL_USER="${SUDO_USER:-$USER}"

# --- 3. Instalasi Docker dan Dependensi ---
log_info "Memulai instalasi Docker..."
apt-get update
apt-get install -y ca-certificates curl gnupg
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
log_success "Docker dan dependensinya berhasil diinstal."

# --- 4. Instalasi & Konfigurasi Ollama ---
log_info "Instalasi & Konfigurasi Ollama"
if ! command -v ollama &> /dev/null; then
    curl -fsSL https://ollama.com/install.sh | sh
fi
mkdir -p /etc/systemd/system/ollama.service.d/
bash -c 'cat << EOF > /etc/systemd/system/ollama.service.d/override.conf
[Service]
Environment="OLLAMA_HOST=0.0.0.0"
EOF'
systemctl daemon-reload && systemctl restart ollama
log_success "Ollama berhasil diinstal dan dikonfigurasi."

# --- 5. Konfigurasi Pengguna Docker & Model Pull ---
log_info "Konfigurasi Akhir & Pra-unduh Model"
if ! getent group docker | grep -q "\b$ORIGINAL_USER\b"; then
    usermod -aG docker "$ORIGINAL_USER"
    log_warn "Pengguna '$ORIGINAL_USER' telah ditambahkan ke grup Docker. Diperlukan logout/login ulang."
fi

if [[ -n "$OLLAMA_PREPULL_MODEL" ]]; then
    log_info "Memulai pra-unduh model: $OLLAMA_PREPULL_MODEL (ini bisa memakan waktu)..."
    ollama pull "$OLLAMA_PREPULL_MODEL"
    log_success "Model '$OLLAMA_PREPULL_MODEL' berhasil diunduh."
fi

# --- 6. Instalasi Open WebUI via Docker ---
log_info "Menjalankan Kontainer Open WebUI"
if [ "$(docker ps -a -q -f name=open-webui)" ]; then
    docker stop open-webui && docker rm open-webui
fi
docker run -d -p 127.0.0.1:${WEBUI_PORT}:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always "ghcr.io/open-webui/open-webui:${WEBUI_IMAGE_TAG}"
log_success "Kontainer Open WebUI berjalan di port lokal ${WEBUI_PORT}."

# --- 7. Konfigurasi Nginx Reverse Proxy (Opsional SSL) ---
log_info "Memulai Konfigurasi Nginx Reverse Proxy"
NGINX_CONFIG_FILE="/etc/nginx/sites-available/$USER_DOMAIN"

if [[ "$ACTIVATE_SSL" =~ ^[Yy]$ ]]; then
    # --- KASUS: SSL DIAKTIFKAN ---
    log_info "Mengaktifkan SSL... Menginstal Nginx dan Certbot."
    apt-get install -y nginx certbot python3-certbot-nginx
    
    # Konfigurasi Nginx untuk tantangan Certbot (lebih ketat)
    cat << EOF > $NGINX_CONFIG_FILE
server {
    listen 80;
    server_name $USER_DOMAIN;
    root /var/www/html;
    
    location ~ /.well-known/acme-challenge/ {
        allow all;
    }

    # <<< PERBAIKAN >>>
    # Tolak semua request lain selama proses validasi
    location / {
        return 404;
    }
}
EOF
    ln -s -f $NGINX_CONFIG_FILE /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    systemctl restart nginx

    # <<< PERBAIKAN DIMULAI: Mekanisme Coba-Lagi untuk Certbot >>>
    log_info "Meminta sertifikat SSL dengan Certbot (dengan mekanisme coba-lagi)..."
    MAX_RETRIES=3
    RETRY_DELAY=30 # dalam detik
    CERT_SUCCESS=false

    for i in $(seq 1 $MAX_RETRIES); do
        if certbot --nginx -d "$USER_DOMAIN" --non-interactive --agree-tos -m "$USER_EMAIL" --redirect; then
            log_success "Sertifikat SSL berhasil didapatkan pada percobaan ke-$i."
            CERT_SUCCESS=true
            break
        else
            log_warn "Percobaan ke-$i untuk mendapatkan sertifikat SSL gagal."
            if [ "$i" -lt "$MAX_RETRIES" ]; then
                log_warn "Akan mencoba lagi dalam $RETRY_DELAY detik..."
                sleep $RETRY_DELAY
            fi
        fi
    done

    if [ "$CERT_SUCCESS" = false ]; then
        log_error "Tidak dapat memperoleh sertifikat SSL setelah $MAX_RETRIES percobaan. Silakan periksa log di /var/log/letsencrypt/."
        exit 1
    fi
    # <<< PERBAIKAN SELESAI >>>
    
    # Timpa konfigurasi dengan setting reverse proxy setelah SSL didapat
    cat << EOF > $NGINX_CONFIG_FILE
server {
    server_name $USER_DOMAIN;
    location / {
        proxy_pass http://127.0.0.1:${WEBUI_PORT};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/$USER_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$USER_DOMAIN/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}
server {
    if (\$host = $USER_DOMAIN) {
        return 301 https://\$host\$request_uri;
    }
    listen 80;
    listen [::]:80;
    server_name $USER_DOMAIN;
    return 404;
}
EOF
    FINAL_URL="https://$USER_DOMAIN"
else
    # --- KASUS: SSL TIDAK DIAKTIFKAN ---
    log_info "Mengkonfigurasi tanpa SSL... Menginstal Nginx."
    apt-get install -y nginx
    cat << EOF > $NGINX_CONFIG_FILE
server {
    listen 80;
    listen [::]:80;
    server_name $USER_DOMAIN;
    location / {
        proxy_pass http://127.0.0.1:${WEBUI_PORT};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }
}
EOF
    ln -s -f $NGINX_CONFIG_FILE /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    FINAL_URL="http://$USER_DOMAIN"
fi

log_info "Menyelesaikan Konfigurasi Nginx..."
if ! nginx -t; then
    log_error "Tes konfigurasi Nginx gagal. Silakan periksa file $NGINX_CONFIG_FILE."
    exit 1
fi
systemctl restart nginx
log_success "Nginx berhasil dikonfigurasi."

# --- Selesai ---
log_info "INSTALASI SELESAI"
echo -e "\n${GREEN}Semua komponen telah berhasil diinstal dan dikonfigurasi.${NC}"
echo -e "Anda sekarang dapat mengakses Open WebUI melalui URL berikut:"
echo -e "\n   ${YELLOW}${FINAL_URL}${NC}\n"
if ! getent group docker | grep -q "\b$ORIGINAL_USER\b"; then
    log_warn "Aksi Diperlukan: Pengguna '$ORIGINAL_USER' perlu LOGOUT dan LOGIN kembali untuk menggunakan 'docker' tanpa 'sudo'."
fi
