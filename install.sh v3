#!/bin/bash
set -e

# === [ Auto Installer: Docker + Ollama + Open WebUI + SSL + Custom Domain (IPv4 ping only) ] ===

if [ "$(id -u)" -ne 0 ]; then
  echo "Jalankan script ini sebagai root (sudo)."
  exit 1
fi

echo "Update package index & install prerequisite..."
apt-get update -y
DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates curl gnupg lsb-release software-properties-common dnsutils iputils-ping

# Remove old docker if any
apt-get remove -y docker docker-engine docker.io containerd runc docker-compose docker-compose-v2 podman-docker || true

echo "Cek apakah Docker sudah terinstall..."
if ! command -v docker &> /dev/null; then
  echo "Tambah Docker official repository..."
  install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  chmod a+r /etc/apt/keyrings/docker.gpg

  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null

  apt-get update -y
  apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  echo "Docker berhasil diinstall."
else
  echo "Docker sudah terinstall, melewati proses install."
fi

echo "Memastikan service Docker aktif..."
systemctl start docker
systemctl enable docker

echo "Cek Docker version..."
docker --version
docker compose version

echo "Cek container Ollama..."
if ! docker ps -a --format '{{.Names}}' | grep -qw ollama; then
  echo "Menjalankan container Ollama..."
  docker run -d --name ollama --restart always -v ollama:/root/.ollama -p 11434:11434 ollama/ollama
else
  echo "Container 'ollama' sudah ada. Lewati."
fi

echo "Cek container Open WebUI..."
if ! docker ps -a --format '{{.Names}}' | grep -qw open-webui; then
  echo "Menjalankan container Open WebUI..."
  docker run -d --name open-webui --restart always -p 3000:8080 -v ollama:/root/.ollama -v open-webui:/app/backend/data ghcr.io/open-webui/open-webui:ollama
else
  echo "Container 'open-webui' sudah ada. Lewati."
fi

echo ""
echo "=== Input domain untuk Open WebUI ==="
read -p "Masukkan nama domain (mis: example.com): " DOMAIN
if [[ -z "$DOMAIN" ]]; then
  echo "Domain tidak boleh kosong. Exiting."
  exit 1
fi

# Regex: valid untuk domain .com .fun .id dll
if ! [[ "$DOMAIN" =~ ^[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)+$ ]]; then
  echo "Format domain tidak valid. Pastikan domain benar (mis: example.com)."
  exit 1
fi

SERVER_IPV4=$(curl -4 -s ifconfig.me)

echo "Cek ping IPv4 ke $DOMAIN ..."
PING_IPV4=$(ping -c 1 -4 "$DOMAIN" | grep "bytes from" | head -n1 | awk -F'[()]' '{print $2}' | awk '{print $1}')

if [[ -z "$PING_IPV4" ]]; then
  echo "Ping ke $DOMAIN gagal. Pastikan domain aktif dan dapat diping."
  exit 1
fi

if [[ "$PING_IPV4" != "$SERVER_IPV4" ]]; then
  echo "Domain $DOMAIN belum mengarah ke IP server ($SERVER_IPV4)."
  echo "Arahkan dulu A record $DOMAIN ke $SERVER_IPV4, lalu jalankan ulang script ini."
  exit 1
fi

echo "Ping IPv4 cocok: $PING_IPV4"
echo "Domain $DOMAIN sudah terhubung ke server."

echo "Cek nginx & certbot..."
if ! command -v nginx &> /dev/null; then
  apt-get install -y nginx
else
  echo "nginx sudah terinstall."
fi

if ! command -v certbot &> /dev/null; then
  apt-get install -y certbot python3-certbot-nginx
else
  echo "certbot sudah terinstall."
fi

echo "Cek konfigurasi nginx untuk $DOMAIN..."
if [ ! -f /etc/nginx/sites-available/$DOMAIN ]; then
  echo "Konfigurasi Nginx reverse proxy..."
  cat > /etc/nginx/sites-available/$DOMAIN <<EOF
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
  ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
  rm -f /etc/nginx/sites-enabled/default
else
  echo "Nginx config untuk $DOMAIN sudah ada. Lewati."
fi

# Pastikan Nginx aktif sebelum reload config
systemctl start nginx
systemctl enable nginx
nginx -t || { echo "Nginx configuration error!"; exit 1; }
systemctl reload nginx

echo "Cek sertifikat SSL untuk $DOMAIN..."
if [ ! -d "/etc/letsencrypt/live/$DOMAIN" ]; then
  echo "Proses request SSL via Let's Encrypt..."
  certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --redirect -m "admin@$DOMAIN" || { echo "Certbot gagal!"; exit 1; }
else
  echo "Sertifikat SSL untuk $DOMAIN sudah ada. Lewati."
fi

echo "Aktifkan dan konfigurasi UFW (firewall)..."
ufw allow OpenSSH
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 3000/tcp
ufw allow 11434/tcp
ufw --force enable

echo ""
echo "==== SELESAI ===="
echo "Open WebUI siap diakses di: https://$DOMAIN"
echo "Ollama API port: 11434"
